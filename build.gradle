plugins {
    id 'nu.studer.credentials' version '3.0'
    id 'java-library'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'maven-publish'
    id 'signing'
}

String signingPassword = credentials.forKey('ossSigningPassword') ?: ''
String nexusPassword = credentials.forKey('nexusPassword') ?: ''
String nexusUser = credentials.forKey('nexusUsername') ?: ''

project.ext['signing.password'] = signingPassword
project.ext.nexusPassword = nexusPassword

group = "io.github.rburgst"
archivesBaseName = 'okhttp-digest'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    okhttpVersion = "4.10.0"
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = "UTF-8"

dependencies {
    implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    testImplementation "com.squareup.okhttp3:logging-interceptor:${okhttpVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.21.0'
    testImplementation 'org.mockito:mockito-core:4.0.0'
}

java {
    withJavadocJar()
    withSourcesJar()
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = 'okhttp-digest'
                description = 'A digest authenticator for okhttp.'
                url = 'https://github.com/rburgst/okhttp-digest'
                inceptionYear = '2015'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rburgst'
                        name = 'Rainer Burgstaller'
                        email = 'rburgst@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:rburgst/okhttp-digest.git'
                    developerConnection = 'scm:git:git@github.com:rburgst/okhttp-digest.git'
                    url = 'https://github.com/rburgst/okhttp-digest'
                }
            }
        }
    }


    if (project.hasProperty('repositoryUrl')) {
        repositories {
            maven {
                name = "localRepo"
                url = uri(project.repositoryUrl)
            }
        }
    }
}


nexusPublishing {
    repositories {
        sonatype {
            username = nexusUser
            password = nexusPassword
        }
    }
}

signing {
    required { !project.version.endsWith("-SNAPSHOT") && !project.hasProperty("skipSigning") }
    if (project.findProperty("signingKey")) {
        useInMemoryPgpKeys(findProperty("signingKey"), signingPassword)
    }
    sign publishing.publications.maven
}

//do not generate extra load on Nexus with new staging repository if signing fails
tasks.withType(io.github.gradlenexus.publishplugin.InitializeNexusStagingRepository).configureEach {
    shouldRunAfter(tasks.withType(Sign))
}

